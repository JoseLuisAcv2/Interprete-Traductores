#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "retina_lexer"
require_relative "retina_ast"

class SyntacticError < RuntimeError

    def initialize(tok)
        @token = tok
    end

    def to_s
        "Syntactic error on line #{@token.line}, column #{@token.column}: #{@token.t}"   
    end
end

class Parser < Racc::Parser

module_eval(<<'...end retina_parser.y/module_eval...', 'retina_parser.y', 31)

def on_error(id, token, stack)
    raise SyntacticError::new(token)
end

def next_token
	if @lexer.has_next_token then
		token = @lexer.next_token;
        case token.class.to_s
        when "Reserved"
            return [:Reserved,token.t]

        end
    else
        return [false,false];
	end
end

def parse(lexer)
    @yydebug = true
    @lexer = lexer
    @tokens = []
    ast = do_parse
    return ast
end
...end retina_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     5 ]

racc_action_check = [
     0,     1,     4 ]

racc_action_pointer = [
    -2,     1,   nil,   nil,     2,   nil ]

racc_action_default = [
    -3,    -3,    -1,    -2,    -3,     6 ]

racc_goto_table = [
     1,     2 ]

racc_goto_check = [
     1,     2 ]

racc_goto_pointer = [
   nil,     0,     1 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 4, :_reduce_1,
  1, 5, :_reduce_none ]

racc_reduce_n = 3

racc_shift_n = 6

racc_token_table = {
  false => 0,
  :error => 1,
  :RESERVED => 2 }

racc_nt_base = 3

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "RESERVED",
  "$start",
  "Retina",
  "Expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'retina_parser.y', 8)
  def _reduce_1(val, _values, result)
    puts val[0] 
    result
  end
.,.,

# reduce 2 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
