#!/usr/bin/ruby
#
# 	Traductores e Interpretadores CI-3725
# 	
# 	Proyecto Fase 2 - Interpreter main file
#
# 	Autores:
# 				- Jose Acevedo		13-10006
# 				- Edwar Yepez 		12-10855
#

# Import dependencies
require_relative 'retina_lexer'
require_relative 'retina_parser'
require_relative 'retina_semantic_analyser'

def main

	#Check file was given
	if ARGV[0].nil? then
		puts "Enter Retina file."
		return
	end

	# Check file exists
	if not File.file?(ARGV[0]) then
		puts "File does not exist."
		return
	end

	# Check '.rtn' file extension
	ARGV[0] =~ /\w+\.rtn/
	if $&.nil? then
		puts "Invalid file extension."
		return
	end

	# Creates lexer and obtains tokens found in rtn file
	lexer = Lexer.new ARGV[0]
	lexer.get_tokens

	# In case of lexicographic errors, prints those errors and finish program
	if lexer.has_lexicographic_errors then
		lexer.print_lexicographic_errors
		return
	end

	# Creates parser for the given file in case parse has parsed
	# successfully or prints unexpected token otherwise
	begin
		parser = Parser.new lexer
		ast = parser.parse
	rescue SyntacticError => e
		puts e
		return
	end

	############################################
	############## codeando aqui ###############
	############################################
	# Create symbol table for the AST returned by the parser and
	# make semantic verifications
	begin

		#ast.print_ast()

		semanticAnalyser = SemanticAnalyser.new ast
		symbolTable = semanticAnalyser.analyze
		#symbolTable.print_tables()
	rescue SemanticError => e
		puts e
		return
	end
	############################################
	############################################
	############################################

end

main