#!/usr/bin/ruby
#
# 	Traductores e Interpretadores CI-3725
# 	
# 	Proyecto Fase 4 - Interpreter main file
#
# 	Autores:
# 				- Jose Acevedo		13-10006
# 				- Edwar Yepez 		12-10855
#

# Import dependencies
require_relative 'retina_lexer'
require_relative 'retina_parser'
require_relative 'retina_semantic_analyser'
require_relative 'retina_interpreter'

def main

	#Check file was given
	if ARGV[0].nil? then
		puts "RETINA PROGRAMMING LANGUAGE"
		puts "SYNTAX: ./retina file [flag]"
		puts "FLAGS:"
		puts "\t-t: Print token list"
		puts "\t-a: Print abstract syntax tree"
		puts "\t-s: Print symbol table"
		return
	end

	# Check file exists
	if not File.file?(ARGV[0]) then
		puts "File '" + ARGV[0] + "' does not exist."
		return
	end

	# Check '.rtn' file extension
	ARGV[0] =~ /\w+\.rtn/
	if $&.nil? then
		puts "Invalid file extension."
		return
	end

	# Check flags
	file, *flags = ARGV

	# Creates lexer and obtains tokens found in rtn file
	lexer = Lexer.new ARGV[0]
	lexer.get_tokens

	# In case of lexicographic errors, prints those errors and finish program
	if lexer.has_lexicographic_errors then
		lexer.print_lexicographic_errors
		return
	end

	# Print tokens
	if flags.include? "-t" then
		lexer.print_tokens()
		return
	end

	# Creates parser for the given file in case parse has parsed
	# successfully or prints unexpected token otherwise
	begin
		parser = Parser.new lexer
		ast = parser.parse
		# Print AST
		if flags.include? "-a" then
			ast.print_ast()
			return
		end
	rescue SyntacticError => e
		puts e
		return
	end

	# Create symbol table for the AST returned by the parser and
	# make semantic verifications
	begin
		semanticAnalyser = SemanticAnalyser.new ast
		symbolTable = semanticAnalyser.analyze
		# Print symbol tables
		if flags.include? "-s" then
			symbolTable.print_tables()
			return
		end
	rescue SemanticError => e
		puts e
		return
	end

	# Interpret AST of the program
	begin
		interpreter = Interpreter.new ast
		interpreter.interpret
	rescue RunTimeError => e
		puts e
		return
	end

end

main