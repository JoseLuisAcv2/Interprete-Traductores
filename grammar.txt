RETINA
: DEFBLOCK PROGRAMBLOCK
| DEFBLOCK

DEFBLOCK
: DEF DEFBLOCK
| 
;

DEF
: FUNC IDENT(PARAMLIST) BEGIN FUNCINSTR END;
| FUNC IDENT(PARAMLIST) -> TYPE BEGIN FUNCINSTR END;
| FUNC IDENT() BEGIN FUNCINSTR END;
| FUNC IDENT() BEGIN -> TYPE FUNCINSTR END;
;

FUNCINSTR
: INSTR FUNCINSTR
| FUNCCOND; FUNCINSTR
| FUNCITER; FUNCINSTR
| FUNCWITHBLOCK; FUNCINSTR 
| RETURNEXPR; FUNCINSTR
| 
;

RETURNEXPR 
: RETURN
| RETURN EXPR
;

PARAMLIST
: PARAM COLON PARAMLIST
| PARAM
;

PARAM
: TYPE IDENT
;

PROGRAMBLOCK
: PROGRAM INSTR END;

INSTR
: EXPR; INSTR 
| ASSIGN; INSTR
| COND; INSTR
| ITER; INSTR
| READBLOCK; INSTR
| WRITEBLOCK; INSTR
| WITHBLOCK; INSTR
| 
;

EXPR
: AEXPR
| BEXPR
;

AEXPR
: AEXPR AOP AEXPR
| AEXPR MINUS AEXPR
| (AEXPR)
| MINUS AEXPR
| N
| IDENT
| CALLFUNC
;

BEXPR
: BEXPR BOP BEXPR
| (BEXPR)
| NOT BEXPR
| EXPR EQUALITYOPS EXPR
| AEXPR ORDEROPS AEXPR
| B
| IDENT
| CALLFUNC
;


DECLBLOCK
: DECL DECLBLOCK
|
;

DECL
: TYPE IDENTLIST;
| TYPE ASSIGN;
;

ASSIGN
: IDENT = EXPR
;

IDENTLIST
: IDENT, IDENTLIST
| IDENT
;

TERMINALLIST
: B, TERMINALLIST
| N, TERMINALLIST
| IDENT, TERMINALLIST
| B
| N
| IDENT
;

B
: BOOLEAN
;

N
: NUMBER
;

IDENT
: IDENTIFIER
;

COND
: IF BEXPR THEN INSTR END
| IF BEXPR THEN INSTR ELSE INSTR END
;

FUNCCOND
: IF BEXPR THEN FUNCINSTR END
| IF BEXPR THEN FUNCINSTR ELSE FUNCINSTR END
;

ITER
: WHILE BEXPR DO INSTR END 
| FOR IDENT FROM AEXPR TO AEXPR BY AEXPR DO INSTR END
| FOR IDENT FROM AEXPR TO AEXPR DO INSTR END
| REPEAT AEXPR TIMES INSTR END
;

FUNCITER
: WHILE BEXPR DO FUNCINSTR END 
| FOR IDENT FROM AEXPR TO AEXPR BY AEXPR DO FUNCINSTR END
| FOR IDENT FROM AEXPR TO AEXPR DO FUNCINSTR END
| REPEAT AEXPR TIMES FUNCINSTR END
;

WITHBLOCK
: WITH DECLBLOCK; DO INSTR END
;

FUNCWITHBLOCK
: WITH DECLBLOCK; DO FUNCINSTR END
;

CALLFUNC
: IDENT(TERMINALLIST)
: IDENT()
;
