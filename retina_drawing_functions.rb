#
# 	Traductores e Interpretadores CI-3725
# 	
# 	Proyecto Fase 4 - Interpreter
#
#  	Retina Drawing Library
#
# 	Autores:
# 				- Jose Acevedo		13-10006
#               - Edwar Yepez       12-10855
#

# Image generated by Retina program
class Image

	def initialize(height=11, width=11, cursor_x=0, cursor_y=0, degree=90, opened_eye=true)
		@image = Array.new(height) { Array.new(width) { 0 } }
		@height = height
		@width = width
		@cursor_column = convert_x_to_column(cursor_x)
		@cursor_row = convert_y_to_row(cursor_y)
		@degree = degree
		@opened_eye = opened_eye

		# Mark initial position
		@image[@cursor_row][@cursor_column] = 1
	end

	# Compare to retina predefined functions
	def retina_function(funcCall)
	
		# Function identifier
		funcIdent = funcCall.ident.name.value
	
		# If match found then call function
		case funcIdent
		when "home"
			home()
			return true
		
		when "openeye"
			openeye()
			return true
		
		when "closeeye"
			closeeye()
			return true
		
		when "forward"
			steps = funcCall.arglist.arg.value.value
			forward(steps)
			return true
		
		when "backward"
			steps = funcCall.arglist.arg.value.value
			backward(steps)
			return true
		
		when "rotater"
			degree = funcCall.arglist.arg.value.value
			rotater(degree)
			return true
		
		when "rotatel"
			degree = funcCall.arglist.arg.value.value
			rotatel(degree)
			return true
		
		when "setposition"
			x = funcCall.arglist.arg.value.value
			y = funcCall.arglist.arglist.arg.value.value
			setposition(x,y)
			return true
		
		when "arc"
			degree = funcCall.arglist.arg.value.value
			radius = funcCall.arglist.arglist.arg.value.value
			arc(degree,radius)
			return true
		
		end
	end

	# Reset cursor coordinates to center of image	
	def home()
		@cursor_row = (@height-1)/2
		@cursor_column = (@width-1)/2
	end
	
	# Enable cursor to mark movement
	def openeye()
		@opened_eye = true
	end
	
	# Disable cursor to mark movement
	def closeeye()
		@opened_eye = false
	end
	
	def forward(steps)
	end
	
	def backward(steps)
	end
	
	def rotater(degree)
	end
	
	def rotatel(degree)
	end
	
	def setposition(x,y)
	end
	
	def arc(degree,radius)
	end

	# Store image in .pbm file
	def store()
		# Get filename of input program
		filename = ARGV[0]
		# Remove extension
		filename = File.basename(filename,".rtn")
		# Add extension
		filename << ".pbm"

		# Create new file
		newFile = File.open(filename, "w")
	
		# Add magid number and dimensions of matrix
		newFile.puts("P1")
		newFile.print(@width)
		newFile.print(' ')
		newFile.puts(@height)

		# Store matrix in file
		@image.each do |row|
			row.each do |pixel|
				newFile.print pixel, ' '
			end
			newFile.puts
		end

		# Close stream
		newFile.close
	end

	# Auxiliary function to convert x coordinate from
	# cartesian system to matrix column
	def convert_x_to_column(x)
		return ((@width-1)/2) + x
	end

	# Auxiliary function to convert y coordinate from
	# cartesian system to matrix row
	def convert_y_to_row(y)
		return ((@width-1)/2) - y
	end
end